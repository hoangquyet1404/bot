const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports.config = {
    name: "hent",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "D≈©ngkon",
    description: "",
    commandCategory: "ti·ªán √≠ch",
    usages: "search",
    cooldowns: 5,
    dependencies: {
        "axios": "",
        "fs": ""
    }
};

module.exports.run = async function ({ api, event, args }) {
    const { threadID, senderID } = event;
    const out = (msg) => api.sendMessage(msg, threadID);

    if (args.length === 0) return out("Thi·∫øu d·ªØ li·ªáu. Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm.");

    const search = args.join(" ");
    const searchResults = [];

    try {
        const res = await axios.get(`https://joshweb.click/api/nhntais?q=${encodeURIComponent(search)}`);
        const data = res.data.result;

        if (!data || data.length === 0) {
            return out("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o.");
        }

        data.slice(0, 10).forEach((item, index) => {
            searchResults.push(`ID: ${index + 1}\nüìù Ti√™u ƒë·ªÅ: ${item.title}\n‚ä± ‚ãÖ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚ãÖ ‚ä∞`);
        });

        api.sendMessage({
            body: "[T√åM KI·∫æM TR√äN NHENTAI]\n" + searchResults.join("\n\n") + "\n\n¬ª H√£y reply (ph·∫£n h·ªìi) ch·ªçn m·ªôt trong nh·ªØng t√¨m ki·∫øm tr√™n.",
        }, threadID, (error, info) => {
            if (error) return console.error(error);
            global.client.handleReply.push({
                name: exports.config.name,
                author: senderID,
                messageID: info.messageID,
                result: data
            });
        });
    } catch (error) {
        console.error("ƒê√£ x·∫£y ra l·ªói:", error.message);
        out("ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm.");
    }
};

module.exports.handleReply = async function ({ event, api, handleReply }) {
    const { threadID, messageID, body, senderID } = event;
    const out = (msg) => api.sendMessage(msg, threadID, messageID);

    if (senderID !== handleReply.author) {
        return out("B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi d√πng l·ªánh.");
    }

    const choice = parseInt(body.trim());
    if (isNaN(choice)) return out("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·ªôt con s·ªë.");
    if (choice < 1 || choice > handleReply.result.length) return out("‚ùé L·ª±a ch·ªçn kh√¥ng n·∫±m trong danh s√°ch.");

    const chosenItem = handleReply.result[choice - 1];

    api.sendMessage("LOADING...!", threadID, (err, info) => setTimeout(() => api.unsendMessage(info.messageID), 10000));

    try {
        const res = await axios.get(`https://joshweb.click/api/nhntaidl?q=${encodeURIComponent(chosenItem.link)}`);
        console.log(res);
        const { images, categories } = res.data.result;

        if (!images || images.length === 0) {
            return out("Kh√¥ng t√¨m th·∫•y URL ·∫£nh.");
        }

        const numImages = parseInt(categories) || images.length;
        const attachments = await Promise.all(images.slice(0, numImages).map(async (url, index) => {
            if (!url) return null; // B·ªè qua URL ·∫£nh r·ªóng
            const imagePath = path.join(__dirname, `cache/image_${index}.jpg`);
            const imageRes = await axios.get(url, { responseType: "arraybuffer" });
            fs.writeFileSync(imagePath, Buffer.from(imageRes.data));
            return { path: imagePath, stream: fs.createReadStream(imagePath) };
        })).then(results => results.filter(file => file)); // Lo·∫°i b·ªè c√°c file r·ªóng

        if (attachments.length === 0) {
            return out("Kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá ƒë·ªÉ t·∫£i.");
        }

        api.sendMessage({
            body: "TRUY·ªÜN HENTAI",
            attachment: attachments.map(att => att.stream)
        }, threadID, (error) => {
            if (error) console.error(error);
            // X√≥a c√°c t·ªáp ·∫£nh sau khi g·ª≠i
            attachments.forEach(file => {
                fs.unlinkSync(file.path);
            });
        }, messageID);
    } catch (error) {
        console.error("Error:", error.message);
        out("ƒê√£ x·∫£y ra l·ªói khi t·∫£i ·∫£nh. " + error);
    }
};
